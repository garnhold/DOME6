//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/garrett/Documents/Programming/DOME6/DOME6/DOMEGrammar/DOME.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IDOMEVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DOMEBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IDOMEVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.grammarDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGrammarDefinition([NotNull] DOMEParser.GrammarDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>definition_RuleDefinition_ConcreteDirect</c>
	/// labeled alternative in <see cref="DOMEParser.definition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDefinition_RuleDefinition_ConcreteDirect([NotNull] DOMEParser.Definition_RuleDefinition_ConcreteDirectContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>definition_RuleDefinition_ConcreteInherited</c>
	/// labeled alternative in <see cref="DOMEParser.definition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDefinition_RuleDefinition_ConcreteInherited([NotNull] DOMEParser.Definition_RuleDefinition_ConcreteInheritedContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>definition_RuleDefinition_Abstract</c>
	/// labeled alternative in <see cref="DOMEParser.definition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDefinition_RuleDefinition_Abstract([NotNull] DOMEParser.Definition_RuleDefinition_AbstractContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>definition_TokenDefinition</c>
	/// labeled alternative in <see cref="DOMEParser.definition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitDefinition_TokenDefinition([NotNull] DOMEParser.Definition_TokenDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.id"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitId([NotNull] DOMEParser.IdContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.grammarHeader"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGrammarHeader([NotNull] DOMEParser.GrammarHeaderContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.importHeader"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitImportHeader([NotNull] DOMEParser.ImportHeaderContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>grammarTypeParser</c>
	/// labeled alternative in <see cref="DOMEParser.grammarType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGrammarTypeParser([NotNull] DOMEParser.GrammarTypeParserContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>grammarTypeLexer</c>
	/// labeled alternative in <see cref="DOMEParser.grammarType"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitGrammarTypeLexer([NotNull] DOMEParser.GrammarTypeLexerContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.info"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitInfo([NotNull] DOMEParser.InfoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>quantifierNoneOrOne</c>
	/// labeled alternative in <see cref="DOMEParser.quantifier"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQuantifierNoneOrOne([NotNull] DOMEParser.QuantifierNoneOrOneContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>quantifierNoneOrMore</c>
	/// labeled alternative in <see cref="DOMEParser.quantifier"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQuantifierNoneOrMore([NotNull] DOMEParser.QuantifierNoneOrMoreContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>quantifierOneOrMore</c>
	/// labeled alternative in <see cref="DOMEParser.quantifier"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQuantifierOneOrMore([NotNull] DOMEParser.QuantifierOneOrMoreContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.ruleReference"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleReference([NotNull] DOMEParser.RuleReferenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.ruleDefinitionConcreteDirect"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleDefinitionConcreteDirect([NotNull] DOMEParser.RuleDefinitionConcreteDirectContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.ruleDefinitionConcreteInherited"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleDefinitionConcreteInherited([NotNull] DOMEParser.RuleDefinitionConcreteInheritedContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.ruleDefinitionAbstract"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleDefinitionAbstract([NotNull] DOMEParser.RuleDefinitionAbstractContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleAtomLiteral</c>
	/// labeled alternative in <see cref="DOMEParser.ruleAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleAtomLiteral([NotNull] DOMEParser.RuleAtomLiteralContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleAtomTokenReference</c>
	/// labeled alternative in <see cref="DOMEParser.ruleAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleAtomTokenReference([NotNull] DOMEParser.RuleAtomTokenReferenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleAtomRuleReference</c>
	/// labeled alternative in <see cref="DOMEParser.ruleAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleAtomRuleReference([NotNull] DOMEParser.RuleAtomRuleReferenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleAtomGroup</c>
	/// labeled alternative in <see cref="DOMEParser.ruleAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleAtomGroup([NotNull] DOMEParser.RuleAtomGroupContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleAtomInfoGroup</c>
	/// labeled alternative in <see cref="DOMEParser.ruleAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleAtomInfoGroup([NotNull] DOMEParser.RuleAtomInfoGroupContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleExpression_Sequence</c>
	/// labeled alternative in <see cref="DOMEParser.ruleExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleExpression_Sequence([NotNull] DOMEParser.RuleExpression_SequenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>ruleExpression_Alternatives</c>
	/// labeled alternative in <see cref="DOMEParser.ruleExpression"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRuleExpression_Alternatives([NotNull] DOMEParser.RuleExpression_AlternativesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.settings"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSettings([NotNull] DOMEParser.SettingsContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>setting_Flag</c>
	/// labeled alternative in <see cref="DOMEParser.setting"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSetting_Flag([NotNull] DOMEParser.Setting_FlagContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>setting_Value</c>
	/// labeled alternative in <see cref="DOMEParser.setting"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSetting_Value([NotNull] DOMEParser.Setting_ValueContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.tokenReference"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenReference([NotNull] DOMEParser.TokenReferenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="DOMEParser.tokenDefinition"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenDefinition([NotNull] DOMEParser.TokenDefinitionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomTokenReference</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomTokenReference([NotNull] DOMEParser.TokenAtomTokenReferenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomAlternatives</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomAlternatives([NotNull] DOMEParser.TokenAtomAlternativesContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomPeriod</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomPeriod([NotNull] DOMEParser.TokenAtomPeriodContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomLiteral</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomLiteral([NotNull] DOMEParser.TokenAtomLiteralContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomInfoGroup</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomInfoGroup([NotNull] DOMEParser.TokenAtomInfoGroupContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomGroup</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomGroup([NotNull] DOMEParser.TokenAtomGroupContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomSequence</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomSequence([NotNull] DOMEParser.TokenAtomSequenceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>tokenAtomClass</c>
	/// labeled alternative in <see cref="DOMEParser.tokenAtom"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitTokenAtomClass([NotNull] DOMEParser.TokenAtomClassContext context) { return VisitChildren(context); }
}
